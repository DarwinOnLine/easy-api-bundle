<?php

namespace {{ namespace }};

use EasyApiBundle\Util\ApiProblem;
use EasyApiBundle\Exception\ApiProblemException;

use FOS\RestBundle\View\View;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;

use FOS\RestBundle\Controller\Annotations as Rest;
use JMS\SecurityExtraBundle\Annotation as Security;

use Nelmio\ApiDocBundle\Annotation\Model;
use Swagger\Annotations as SWG;

{% for use in uses %}
use {{ use }};
{% endfor %}

class {{ entity_name }}Controller extends AbstractApiController
{
    protected static $entityClass = {{ entity_name }}::class;
    protected static $entityTypeClass = {{ entity_name }}Type::class;
    //protected static $entitySearchModelClass = {{ entity_name }}SearchModel::class;
    //protected static $entitySearchTypeClass = {{ entity_name }}SearchModelType::class;
    protected static $serializationGroups = [{{ serialization_groups|raw }}];

    /**
     * Get {{ entity_name }} entity.
     *
     * @SWG\Tag(name="{{ entity_name }}")
     *
     * @SWG\Response(
     *     response=200,
     *     description="Successful operation",
     *     @SWG\Schema(ref=@Model(type={{ entity_name }}::class, groups={ {{ serialization_groups|raw }} }))
     * ),
     * @Rest\View(serializerGroups={ {{ serialization_groups|raw }} })
     *
     * @param {{ entity_name }} $entity
     *
     * @throws \Doctrine\ORM\NonUniqueResultException
     *
     * @return {{ entity_name }}
     */
    public function getAction({{ entity_name }} $entity)
    {
        return $this->getEntityAction($entity);
    }

    /**
     * @SWG\Tag(name="{{ entity_name }}")
     *
     * @SWG\Response(
     *     response=200,
     *     description="Successful operation",
     *     @SWG\Schema(
     *         type="array",
     *         @SWG\Items(ref=@Model(type={{ entity_name }}::class, groups={ {{ serialization_groups|raw }} }))
     *     )
     * ),
     * @Rest\View(serializerGroups={ {{ serialization_groups|raw }} })
     *
     * @return array
     */
    public function listAction()
    {
        return $this->getEntityListAction();
    }

    /**
     * Create {{ entity_name }} entity.
     *
     * @SWG\Tag(name="{{ entity_name }}")
     *
     * @SWG\Parameter(
     *     name="data",
     *     in="body",
     *     description="Create data.",
     *     required=true,
     *     @SWG\Schema(ref=@Model(type={{ entity_name }}Type::class))
     * ),
     * @SWG\Response(
     *     response=201,
     *     description="Successful operation",
     *     @SWG\Schema(ref=@Model(type={{ entity_name }}::class, groups={ {{ serialization_groups|raw }} }))
     * ),
     * @SWG\Response(response="404", ref="#/definitions/404"),
     * @SWG\Response(response="405", ref="#/definitions/405"),
     * @SWG\Response(response="415", ref="#/definitions/415")
     *
     * @param Request $request
     *
     * @Rest\View(serializerGroups={ {{ serialization_groups|raw }} })
     *
     * @return View
     */
    public function createAction(Request $request)
    {
        return $this->createEntityAction($request);
    }

    /**
     * Update {{ entity_name }} entity.
     *
     * @SWG\Tag(name="{{ entity_name }}")
     *
     * @SWG\Parameter(
     *     name="data",
     *     in="body",
     *     description="Update data.",
     *     required=true,
     *     @SWG\Schema(ref=@Model(type={{ entity_name }}Type::class))
     * ),
     * @SWG\Response(
     *     response=200,
     *     description="Successful operation",
     *     @SWG\Schema(ref=@Model(type={{ entity_name }}::class, groups={ {{ serialization_groups|raw }} }))
     * ),
     * @SWG\Response(response="404", ref="#/definitions/404"),
     * @SWG\Response(response="405", ref="#/definitions/405"),
     * @SWG\Response(response="415", ref="#/definitions/415")
     *
     * @param Request           $request
     * @param {{ entity_name }} $entity
     *
     * @throws \Doctrine\ORM\NonUniqueResultException
     *
     * @Rest\View(serializerGroups={ {{ serialization_groups|raw }} })
     *
     * @return {{ entity_name }}
     */
    public function updateAction(Request $request, {{ entity_name }} $entity)
    {
        return $this->updateEntityAction($request, $entity);
    }

    /**
     * Delete {{ entity_name }} entity.
     *
     * @SWG\Tag(name="{{ entity_name }}")
     *
     * @SWG\Response(
     *     response=204,
     *     description="Successful operation",
     * ),
     *
     * @param {{ entity_name }} $entity
     *
     * @throws \Doctrine\ORM\NonUniqueResultException
     *
     * @return View
     */
    public function deleteAction({{ entity_name }} $entity)
    {
        return $this->deleteEntityAction($entity);
    }

   /**
    * Describe form.
    *
    * Describe fields of {{ entity_name }} forms.
    *
    * @SWG\Tag(name="{{ entity_name }}")
    *
    * @SWG\Response(
    *     response=200,
    *     description="Parameters data.",
    *     @SWG\Schema(
    *         type="array",
    *         @SWG\Items(ref="#/definitions/form")
    *     ),
    * ),
    *
    * @SWG\Response(response="404", ref="#/definitions/404"),
    * @SWG\Response(response="405", ref="#/definitions/405"),
    * @SWG\Response(response="415", ref="#/definitions/415")
    *
    * @Rest\View()
    *
    * @return \APIGeneratorBundle\Model\SerializedForm
    */
    public function describeFormAction()
    {
        return $this->describeForm({{ entity_name }}Type::class);
    }

}